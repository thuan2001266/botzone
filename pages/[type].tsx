import Head from "next/head";
import React, { useEffect, useState } from "react";
import ProductGrid from "../components/ProductGrid";
import AppleIcon from "@mui/icons-material/Apple";
import Layout from "../components/Layout";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";
import KeyboardArrowUpIcon from "@mui/icons-material/KeyboardArrowUp";
import { Products } from "../interface";
import Carousel from "../components/Carousel";
import iphoneImageImport from "../assets/typeImages/iphone";
import ipadImageImport from "../assets/typeImages/ipad";
import macImageImport from "../assets/typeImages/mac";

export const getStaticPaths = async () => {
  const res = await fetch("http://localhost:8080/api/product");
  const data = await res.json();

  const temppaths = data.data.map((a) => {
    return a.type;
  });

  const temppaths2 = [...new Set(temppaths)];

  const paths = temppaths2.map((p) => {
    return {
      params: {
        type: p.toString(),
      },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context) => {
  const type = context.params.type;

  let productType = "";

  switch (type) {
    case "iphone":
      productType = "iPhone";
      break;
    case "ipad":
      productType = "iPad";
      break;
    case "mac":
      productType = "Mac";
      break;
    case "watch":
      productType = "Watch";
      break;
    default:
      productType = "Error";
      break;
  }

  const res = await fetch(`http://localhost:8080/api/product/type/` + type);
  const data = await res.json();

  let typeList = [...new Set(data.data.map((dat: Products) => dat.model))];

  return {
    props: {
      product: data.data,
      typeList: typeList,
      productType: productType,
    },
  };
};

function Type({ product, typeList, productType }) {
  const [type, setType] = useState("Tất cả");
  const [order, setOrder] = useState("Mới ra mắt");
  const [orderScreen, setOrderScreen] = useState<boolean>(false);
  // const [changeSortType, setChangeSortType] = useState<boolean>(false);
  const [productData, setProductData] = useState<Products[]>();

  let iphoneImage = Object.values(iphoneImageImport);
  let ipadImage = Object.values(ipadImageImport);
  let macImage = Object.values(macImageImport);

  const sortProduct = (orderType: string) => {
    if (orderType == "Mới ra mắt") {
      setProductData(
        product.sort(function (a: Products, b: Products) {
          if (a.name > b.name) return -1;
          if (a.name < b.name) return 1;
          return 0;
        })
      );
    } else if (orderType == "Giá cao đến thấp")
      setProductData(
        product.sort(function (a: Products, b: Products) {
          if (a.price[0] > b.price[0]) return -1;
          if (a.price[0] < b.price[0]) return 1;
          return 0;
        })
      );
    else if (orderType == "Giá thấp đến cao")
      setProductData(
        product.sort(function (a: Products, b: Products) {
          if (a.price[0] < b.price[0]) return -1;
          if (a.price[0] > b.price[0]) return 1;
          return 0;
        })
      );
  };

  useEffect(() => {
    if (!typeList.includes(type)) {
      setType("Tất cả");
    }
    if (type !== "Tất cả") {
      let filteredProduct = product.filter(
        (pro: Products) => pro.model === type
      );
      setProductData(filteredProduct);
    } else {
      setProductData(product);
    }
    return () => {
      setOrderScreen(false);
    };
  }, [type, product]);

  return (
    <div>
      <Head>
        <title>BotZone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="pt-5">
          <div className="flex justify-center items-center">
            <div>
              <AppleIcon className="text-4xl" />
            </div>
            <h2 className="text-4xl">{productType}</h2>
          </div>
          <div className="w-4/5 m-auto rounded-3xl overflow-hidden mb-3 mt-6">
            <Carousel
              images={
                productType == "iPhone"
                  ? iphoneImage
                  : productType == "Mac"
                  ? macImage
                  : ipadImage
              }
            ></Carousel>
          </div>
          <div className="w-4/5 m-auto py-5 flex justify-start ">
            <ul className="flex child:mr-6 child:mt-2 flex-wrap">
              <li onClick={() => setType("Tất cả")} className="cursor-pointer">
                Tất cả
              </li>
              {typeList.map((typelist) => (
                <li
                  className="cursor-pointer"
                  key={typelist}
                  onClick={() => setType(typelist)}
                >
                  {typelist}
                </li>
              ))}
            </ul>
          </div>
          <div>
            <div
              onClick={() => {
                setOrderScreen((prev) => !prev);
              }}
              className="w-4/5 justify-end flex m-auto cursor-pointer relative select-none mb-3"
            >
              <div>Xếp theo: {order}</div>
              <div>
                {orderScreen ? (
                  <KeyboardArrowUpIcon />
                ) : (
                  <KeyboardArrowDownIcon />
                )}
              </div>
              {orderScreen && (
                <div className="absolute top-[110%] right-0 bg-white rounded-2xl text-black px-5 mt-3 z-50 ">
                  <ul className="space-y-2 py-3">
                    <li
                      onClick={() => {
                        sortProduct("Mới ra mắt");
                        setOrder("Mới ra mắt");
                      }}
                    >
                      Mới ra mắt
                    </li>
                    {/* <li onClick={() => setOrder("Bán chạy")}>Bán chạy</li> */}
                    <li
                      onClick={() => {
                        sortProduct("Giá thấp đến cao");
                        setOrder("Giá thấp đến cao");
                      }}
                    >
                      Giá thấp đến cao
                    </li>
                    <li
                      onClick={() => {
                        sortProduct("Giá cao đến thấp");
                        setOrder("Giá cao đến thấp");
                      }}
                    >
                      Giá cao đến thấp
                    </li>
                  </ul>
                </div>
              )}
            </div>
            <div className="grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 w-4/5 m-auto gap-y-5">
              {productData &&
                productData.map((product) => (
                  <ProductGrid
                    key={product.id}
                    id={product.id}
                    image={product.img[0]}
                    name={product.name + " " + product.option[0]}
                    price={product.price[0]}
                    type={product.type}
                  />
                ))}
            </div>
          </div>
        </div>
      </Layout>
    </div>
  );
}

export default Type;
