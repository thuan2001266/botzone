import Head from "next/head";
import React, { useEffect, useState } from "react";

import AppleIcon from "@mui/icons-material/Apple";
import Layout from "../components/Layout";

import { contextType, Products } from "../interface";
import Carousel from "../components/Carousel";
import {
  iphone,
  ipad,
  mac,
  watch,
  accessory,
} from "../assets/imageLink/imageLink";
import ProductList from "../components/ProductList";

export const getStaticPaths = async () => {
  const res = await fetch("https://botzone.onrender.com/" + "api/product");
  const data = await res.json();

  const temppaths = data.data.map((a: Products) => {
    return a.type;
  });

  // const temppaths2 = [...new Set(temppaths)];

  const temppaths2 = temppaths.filter(
    (element: string, index: number) => temppaths.indexOf(element) === index
  );

  const paths = temppaths2.map((p: string) => {
    return {
      params: {
        type: p.toString(),
      },
    };
  });

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps = async (context: contextType) => {
  const type = context.params.type;

  let productType = "";

  switch (type) {
    case "iphone":
      productType = "iPhone";
      break;
    case "ipad":
      productType = "iPad";
      break;
    case "mac":
      productType = "Mac";
      break;
    case "watch":
      productType = "Watch";
      break;
    case "accessory":
      productType = "Accessory";
      break;
    default:
      productType = "Error";
      break;
  }

  const res = await fetch(
    "https://botzone.onrender.com/" + `api/product/type/` + type
  );
  const data = await res.json();

  let typeList = [...new Set(data.data.map((dat: Products) => dat.model))];

  return {
    props: {
      product: data.data,
      typeList: typeList,
      productType: productType,
    },
  };
};

function Type({
  product,
  typeList,
  productType,
}: {
  product: Products[];
  typeList: string[];
  productType: string;
}) {
  return (
    <div>
      <Head>
        <title>{productType}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="pt-5">
          <div className="flex justify-center items-center">
            <div>
              <AppleIcon className="text-4xl" />
            </div>
            <h2 className="text-4xl">{productType}</h2>
          </div>
          <div className="w-4/5 m-auto rounded-3xl overflow-hidden mb-3 mt-6">
            <Carousel
              images={
                productType == "iPhone"
                  ? iphone
                  : productType == "Mac"
                  ? mac
                  : productType == "iPad"
                  ? ipad
                  : productType == "Watch"
                  ? watch
                  : accessory
              }
            ></Carousel>
          </div>
          <ProductList product={product} typeList={typeList}></ProductList>
        </div>
      </Layout>
    </div>
  );
}

export default Type;
